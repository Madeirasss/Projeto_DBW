<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Lobby | Brainstorm</title>
    <!-- Bootstrap CSS for layout and components -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!-- Custom lobby styles -->
    <link rel="stylesheet" href="/css/lobby.css">
</head>

<body>
    <!-- Navbar with app logo and user dropdown -->
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="/intro">
                <h3 class="logo">Brainstorm</h3>
            </a>
            <div class="d-flex align-items-center">
                <!-- User dropdown menu with avatar and username -->
                <div class="dropdown">
                    <a class="d-flex align-items-center text-decoration-none dropdown-toggle" href="#" role="button"
                        id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="user-avatar me-2">
                            <!-- Show user avatar or default if not set -->
                            <img id="header-avatar" src="<%= user.profilePicture || '/images/default-avatar.png' %>"
                                alt="User Avatar">
                        </div>
                        <span class="text-white" id="header-username">
                            <%= user.username %>
                        </span>
                    </a>
                    <!-- Dropdown menu with profile, settings, and logout -->
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                        <li class="dropdown-header px-3 py-2">
                            <div class="fw-bold" id="dropdown-username">
                                <%= user.username %>
                            </div>
                            <div class="small text-muted">Member since <%= new Date(user.createdAt).toLocaleDateString() %>
                            </div>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li><a class="dropdown-item" href="/profile"><i class="fas fa-user me-2"></i>Profile</a></li>
                        <li><a class="dropdown-item" href="/settings"><i class="fas fa-cog me-2"></i>Settings</a></li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li><a class="dropdown-item text-danger" href="/logout"><i
                                    class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main lobby container -->
    <main class="container-fluid lobby-container">
        <div class="row h-100">
            <!-- Left side: Waiting Room with player list and ready/leave buttons -->
            <div class="col-lg-8">
                <div class="card lobby-room h-100">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Room: <span id="room-name">
                                <%= roomName %>
                            </span> <span id="player-count"></span></h4>
                        <div class="room-code">
                            <span>Room Code:</span>
                            <strong id="room-code">
                                <%= roomCode %>
                            </strong>
                            <button class="btn btn-sm btn-copy" title="Copy code">
                                <i class="fas fa-copy"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Player cards will be dynamically added here -->
                        <div class="players-grid" id="players-container">
                        </div>
                    </div>
                    <div class="card-footer">
                        <div class="d-flex justify-content-between align-items-center">
                            <!-- Ready and Leave Room buttons -->
                            <button id="toggle-ready" class="btn btn-ready">
                                <i class="fas fa-check-circle me-2"></i>Ready
                            </button>
                            <button id="leave-room" class="btn btn-quit">
                                <i class="fas fa-sign-out-alt me-2"></i>Leave Room
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right side: Chat and Settings tabs -->
            <div class="col-lg-4 h-100">
                <div class="d-flex flex-column h-100">
                    <!-- Tabs Header for switching between Chat and Settings -->
                    <div class="tabs-header d-flex mb-3">
                        <button class="tab-btn active" id="chat-tab-btn">
                            <i class="fas fa-comments me-2"></i>Chat
                        </button>
                        <!-- Settings tab is only visible to the host -->
                        <button class="tab-btn d-none" id="settings-tab-btn">
                            <i class="fas fa-cog me-2"></i>Settings
                        </button>
                    </div>

                    <!-- Chat Card: displays chat messages and input -->
                    <div class="card chat-card flex-grow-1" id="chat-card">
                        <div class="card-body chat-messages" id="chat-messages">
                            <!-- Messages will appear here -->
                        </div>
                        <div class="card-footer chat-input">
                            <div class="input-group">
                                <input type="text" class="form-control" id="message-input"
                                    placeholder="Type your message...">
                                <button class="btn btn-send" id="send-message">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Settings Card: only visible to the host for game configuration -->
                    <div class="card settings-card flex-grow-1 d-none" id="settings-card">
                        <!-- Error popup for settings issues -->
                        <div id="error-popup" class="alert alert-danger d-none mb-3">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            <span id="error-message"></span>
                        </div>

                        <!-- Warning popup for not-ready players -->
                        <div id="not-ready-players-popup" class="alert alert-warning d-none">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            The following players are not ready:
                            <div id="not-ready-players-list" class="mt-2"></div>
                        </div>

                        <div class="card-body">
                            <form id="game-settings">
                                <!-- Difficulty selection -->
                                <div class="mb-3">
                                    <label class="form-label">Difficulty Level</label>
                                    <div class="btn-group w-100" role="group" id="difficulty-level">
                                        <input type="radio" class="btn-check" name="difficulty" id="easy"
                                            autocomplete="off" value="easy" data-time="60" checked>
                                        <label class="btn btn-outline-primary" for="easy">Easy (60s)</label>

                                        <input type="radio" class="btn-check" name="difficulty" id="medium"
                                            autocomplete="off" value="medium" data-time="30">
                                        <label class="btn btn-outline-primary" for="medium">Medium (30s)</label>

                                        <input type="radio" class="btn-check" name="difficulty" id="hard"
                                            autocomplete="off" value="hard" data-time="10">
                                        <label class="btn btn-outline-primary" for="hard">Hard (10s)</label>

                                        <input type="radio" class="btn-check" name="difficulty" id="custom"
                                            autocomplete="off" value="custom">
                                        <label class="btn btn-outline-primary" for="custom">Custom</label>
                                    </div>
                                </div>

                                <!-- Custom time input, only shown if "Custom" is selected -->
                                <div class="mb-3 custom-settings" id="custom-settings" style="display: none;">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <label for="custom-time" class="form-label">Idea Time (seconds)</label>
                                            <input type="number" class="form-control" id="custom-time" min="5" max="30"
                                                value="10">
                                        </div>
                                    </div>
                                </div>

                                <!-- Private room checkbox -->
                                <div class="mb-3 form-check">
                                    <input type="checkbox" class="form-check-input" id="private-room" checked>
                                    <label class="form-check-label" for="private-room">Private Room</label>
                                </div>
                                <!-- Problem input for the game -->
                                <div class="mb-3">
                                    <label for="problem-input" class="form-label">Problem for this game</label>
                                    <textarea class="form-control" id="problem-input" rows="2" maxlength="300"
                                        placeholder="Type the problem players will solve..."></textarea>
                                </div>
                                <!-- Start Game button (only enabled if all players are ready) -->
                                <div class="d-grid">
                                    <button type="button" id="start-game" class="btn btn-start" disabled>
                                        <i class="fas fa-play me-2"></i>Start Game
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Footer section -->
    <footer class="footer">
        <div class="container">
            <p class="mb-0 text-center text-white">Brainstorm &copy; <%= new Date().getFullYear() %>
            </p>
        </div>
    </footer>

    <!-- Scripts for Bootstrap, Font Awesome, and Socket.io -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialize socket.io and user/room info
        const socket = io();
        const currentUser = {
            id: '<%= user._id %>',
            username: '<%= user.username %>',
            profilePicture: '<%= user.profilePicture || "/images/default-avatar.png" %>'
        };
        const roomCode = '<%= roomCode %>';

        // Join the lobby when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            socket.emit('joinLobby', {
                roomCode: roomCode,
                user: currentUser
            });
        });

        // Listen for lobby updates and update the player list, ready status, and host controls
        socket.on('updateLobby', (data) => {
            const playersContainer = document.getElementById('players-container');
            const settingsCard = document.getElementById('settings-card');
            const settingsTabBtn = document.getElementById('settings-tab-btn');

            // Check if the current user is the host
            const isHost = socket.id === data.hostId;

            // Show or hide the settings tab and card based on host status
            if (isHost) {
                settingsTabBtn.classList.remove('d-none'); // Show tab
                settingsCard.classList.remove('d-none');   // Show card
            } else {
                settingsTabBtn.classList.add('d-none');    // Hide tab
                settingsCard.classList.add('d-none');      // Hide card
                // Always show chat tab for non-hosts
                document.getElementById('chat-tab-btn').classList.add('active');
                settingsTabBtn.classList.remove('active');
                document.getElementById('chat-card').classList.remove('d-none');
                settingsCard.classList.add('d-none');
            }

            // Clear player cards if player count or order changed
            let shouldClear = false;
            const currentCards = Array.from(playersContainer.children);

            if (currentCards.length !== data.players.length) {
                shouldClear = true;
            } else {
                currentCards.forEach((card, index) => {
                    if (card.dataset.playerId !== data.players[index].id) {
                        shouldClear = true;
                    }
                });
            }

            if (shouldClear) {
                playersContainer.innerHTML = '';
            }

            // Update player count display
            document.getElementById('player-count').textContent = `(${data.players.length}${data.maxPlayers ? '/' + data.maxPlayers : ''})`;

            // Add or update player cards
            data.players.forEach((player, index) => {
                const isCurrentUser = player.id === socket.id;
                const isLeader = index === 0;

                // Check if card already exists
                let playerCard = playersContainer.querySelector(`[data-player-id="${player.id}"]`);

                if (!playerCard) {
                    // Create new card
                    playerCard = document.createElement('div');
                    playerCard.className = `player-card ${player.ready ? 'ready' : ''} ${!player.ready ? 'not-ready-highlight' : ''}`;
                    playerCard.dataset.playerId = player.id;
                    playerCard.innerHTML = `
                        ${isLeader ? '<div class="leader-icon" title="Room Leader"><i class="fas fa-crown"></i></div>' : ''}
                        <div class="player-avatar">
                            <img src="${player.profilePicture}" alt="${player.username} Avatar">
                        </div>
                        <div class="player-name">${isCurrentUser ? 'You' : player.username}</div>
                        <div class="player-status ${player.ready ? 'ready' : ''}">
                            ${player.ready ? 'Ready' : 'Not Ready'}
                        </div>
                    `;
                    playersContainer.appendChild(playerCard);
                } else {
                    // Update existing card
                    playerCard.className = `player-card ${player.ready ? 'ready' : ''} ${!player.ready ? 'not-ready-highlight' : ''}`;
                    playerCard.innerHTML = `
                        ${isLeader ? '<div class="leader-icon" title="Room Leader"><i class="fas fa-crown"></i></div>' : ''}
                        <div class="player-avatar">
                            <img src="${player.profilePicture}" alt="${player.username} Avatar">
                        </div>
                        <div class="player-name">${isCurrentUser ? 'You' : player.username}</div>
                        <div class="player-status ${player.ready ? 'ready' : ''}">
                            ${player.ready ? 'Ready' : 'Not Ready'}
                        </div>
                    `;
                }
            });

            // Update ready button for current user
            const currentPlayer = data.players.find(p => p.id === socket.id);
            if (currentPlayer) {
                const readyBtn = document.getElementById('toggle-ready');
                readyBtn.classList.toggle('active', currentPlayer.ready);
                readyBtn.innerHTML = currentPlayer.ready
                    ? '<i class="fas fa-check-circle me-2"></i>Ready'
                    : '<i class="fas fa-times-circle me-2"></i>Not Ready';
            }

            // Update start game button for host
            const startButton = document.getElementById('start-game');
            if (data.players.length > 0 && data.players[0].id === socket.id) {
                const allReady = data.players.every(p => p.ready);
                startButton.disabled = !allReady;
                startButton.title = allReady ? "" : "All players must be ready to start";
            } else {
                startButton.disabled = true;
            }
        });

        // Handle system messages in chat
        socket.on('systemMessage', (message) => {
            addMessage('System', message, 'system');
        });

        // Handle full lobby event
        socket.on('lobbyFull', () => {
            alert('This lobby is full!');
            window.location.href = '/intro';
        });

        // Handle new chat messages
        socket.on('newMessage', (data) => {
            addMessage(data.username, data.message, data.isSelf ? 'self' : 'other');
        });

        // Ready button logic: toggle ready status
        document.getElementById('toggle-ready').addEventListener('click', function () {
            socket.emit('toggleReady', {
                roomCode: roomCode,
                userId: currentUser.id
            });
        });

        // Chat logic: send message on button click or Enter key
        document.getElementById('send-message').addEventListener('click', sendMessage);
        document.getElementById('message-input').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') sendMessage();
        });

        // Function to send a chat message to the server
        function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();

            if (message) {
                socket.emit('sendMessage', {
                    roomCode: roomCode,
                    message: message,
                    user: currentUser
                });
                input.value = '';
            }
        }

        // Function to add a message to the chat area
        function addMessage(sender, content, type = 'other') {
            const messagesContainer = document.getElementById('chat-messages');
            const messageElement = document.createElement('div');

            if (type === 'system') {
                messageElement.className = 'message system';
                messageElement.innerHTML = `<div class="message-content">${content}</div>`;
            } else {
                messageElement.className = `message ${type}`;
                messageElement.innerHTML = `
                    <div class="message-sender">${sender}:</div>
                    <div class="message-content">${content}</div>
                `;
            }

            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Leave lobby logic: emit leave event and redirect
        document.getElementById('leave-room').addEventListener('click', function () {
            socket.emit('leaveLobby', {
                roomCode: roomCode,
                userId: currentUser.id
            });
            window.location.href = '/intro';
        });

        // Start game logic: only host can start, checks if all players are ready
        document.getElementById('start-game').addEventListener('click', function () {
            const problem = document.getElementById('problem-input').value.trim();
            const startButton = this;
            startButton.disabled = true;
            startButton.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Starting...';

            // Hide previous error messages
            document.getElementById('error-popup').classList.add('d-none');
            document.getElementById('not-ready-players-popup').classList.add('d-none');

            socket.emit('startGame', {
                roomCode: roomCode,
                timePerRound: selectedTime, // send the selected time
                problem: problem
            }, (response) => {
                if (!response.success) {
                    // Show error message if not all players are ready or other error
                    const errorPopup = document.getElementById('error-popup');
                    const errorMessage = document.getElementById('error-message');
                    const notReadyPopup = document.getElementById('not-ready-players-popup');
                    const notReadyList = document.getElementById('not-ready-players-list');

                    errorMessage.textContent = response.message;

                    if (response.message.includes('not ready')) {
                        notReadyList.innerHTML = '';
                        socket.emit('getLobbyPlayers', roomCode, (players) => {
                            const notReadyPlayers = players.filter(p => !p.ready);
                            notReadyPlayers.forEach(player => {
                                const playerEl = document.createElement('div');
                                playerEl.className = 'not-ready-player';
                                playerEl.innerHTML = `
                            <img src="${player.profilePicture}" alt="${player.username}">
                            <span>${player.username}</span>
                        `;
                                notReadyList.appendChild(playerEl);
                            });
                        });

                        notReadyPopup.classList.remove('d-none');
                    } else {
                        errorPopup.classList.remove('d-none');
                    }

                    // Re-enable the button after showing the error
                    startButton.disabled = false;
                    startButton.innerHTML = '<i class="fas fa-play me-2"></i>Start Game';
                }
                // On success, redirection is handled by 'redirectToGame' event
            });
        });

        // Redirect to the game page when the server emits the event
        socket.on('redirectToGame', ({ roomCode }) => {
            window.location.href = `/game?room=${roomCode}`;
        });

        // Tab switching logic between Chat and Settings
        document.getElementById('chat-tab-btn').addEventListener('click', function () {
            this.classList.add('active');
            document.getElementById('settings-tab-btn').classList.remove('active');
            document.getElementById('chat-card').classList.remove('d-none');
            document.getElementById('settings-card').classList.add('d-none');
        });

        document.getElementById('settings-tab-btn').addEventListener('click', function () {
            this.classList.add('active');
            document.getElementById('chat-tab-btn').classList.remove('active');
            document.getElementById('settings-card').classList.remove('d-none');
            document.getElementById('chat-card').classList.add('d-none');
        });

        // Copy room code to clipboard
        document.querySelector('.btn-copy').addEventListener('click', function () {
            navigator.clipboard.writeText(roomCode);
            const tooltip = new bootstrap.Tooltip(this, {
                title: 'Copied!',
                trigger: 'manual'
            });
            tooltip.show();
            setTimeout(() => tooltip.hide(), 1000);
        });

        // Difficulty level logic
        let selectedTime = 60; // Default to Easy

        // Listen for difficulty changes and update settings
        document.querySelectorAll('input[name="difficulty"]').forEach(radio => {
            radio.addEventListener('change', function () {
                const customSettings = document.getElementById('custom-settings');
                if (this.value === 'custom') {
                    customSettings.style.display = 'block';
                    // Set selectedTime to the current custom value
                    selectedTime = parseInt(document.getElementById('custom-time').value, 10);
                } else {
                    customSettings.style.display = 'none';
                    selectedTime = parseInt(this.getAttribute('data-time'), 10);

                    // Update settings based on difficulty
                    const settings = {
                        difficulty: this.value,
                        ideaTime: selectedTime
                    };

                    socket.emit('updateSettings', {
                        roomCode: roomCode,
                        settings: settings
                    });
                }
            });
        });

        // When custom time changes, update selectedTime if custom is selected and emit settings
        document.getElementById('custom-time').addEventListener('input', function () {
            if (document.getElementById('custom').checked) {
                selectedTime = parseInt(this.value, 10);
            }
            const settings = {
                difficulty: 'custom',
                ideaTime: this.value,
                problem: document.getElementById('problem-input').value
            };

            socket.emit('updateSettings', {
                roomCode: roomCode,
                settings: settings
            });
        });

        // Also update the settings when the problem input changes
        document.getElementById('problem-input').addEventListener('input', function () {
            const settings = {
                problem: this.value
            };
            socket.emit('updateSettings', {
                roomCode: roomCode,
                settings: settings
            });
        });

        // When the custom difficulty radio is selected, update selectedTime
        document.getElementById('custom').addEventListener('change', function () {
            if (this.checked) {
                selectedTime = parseInt(document.getElementById('custom-time').value, 10);
            }
        });
    </script>
</body>

</html>