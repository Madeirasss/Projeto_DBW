<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game | Brainstorm</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/game.css">
</head>

<body>
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand" href="/intro">
                <h3 class="logo">Brainstorm</h3>
            </a>
            <div class="d-flex align-items-center">
                <div class="dropdown">
                    <a class="d-flex align-items-center text-decoration-none dropdown-toggle" href="#" role="button"
                        id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="user-avatar me-2">
                            <img id="header-avatar" src="<%= user.profilePicture || '/images/default-avatar.png' %>"
                                alt="User Avatar">
                        </div>
                        <span class="text-white" id="header-username">
                            <%= user.username %>
                        </span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                        <li class="dropdown-header px-3 py-2">
                            <div class="fw-bold" id="dropdown-username">
                                <%= user.username %>
                            </div>
                            <div class="small text-muted">Member since <%= new Date(user.createdAt).toLocaleDateString()
                                    %>
                            </div>
                        </li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li><a class="dropdown-item" href="/profile"><i class="fas fa-user me-2"></i>Profile</a></li>
                        <li><a class="dropdown-item" href="/settings"><i class="fas fa-cog me-2"></i>Settings</a></li>
                        <li>
                            <hr class="dropdown-divider">
                        </li>
                        <li><a class="dropdown-item text-danger" href="/logout"><i
                                    class="fas fa-sign-out-alt me-2"></i>Logout</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <main class="container-fluid game-container">
        <div class="row h-100 gx-2">
            <!-- Players Column - Vertical List -->
            <div class="col-md-2">
                <div class="card players-card h-100">
                    <div class="card-header bg-dark d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 text-white">Players</h5>
                        <span class="badge bg-gold" id="player-count"></span>
                    </div>
                    <div class="card-body p-0 d-flex flex-column">
                        <div class="players-list" id="players-list">
                            <!-- Players will be added here dynamically -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Game Column -->
            <div class="col-md-7">
                <div class="card game-card h-100">
                    <div class="card-header text-center bg-dark text-white">
                        <h2 id="prompt-title">Prompt</h2>
                    </div>
                    <div class="card-body">
                        <p id="prompt-text" class="text-center">Here is your prompt. Type your response below:</p>
                        <textarea id="response-input" class="form-control" rows="5"
                            placeholder="Type your response here..."></textarea>
                        <div id="generated-response" class="mt-3 text-center text-success d-none"></div> <!-- New -->
                    </div>
                    <div class="card-footer text-center bg-dark">
                        <button id="submit-response" class="btn btn-primary">Submit</button>
                    </div>
                </div>
            </div>

            <!-- Chat Column -->
            <div class="col-md-3">
                <div class="card chat-card h-100">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0">Chat</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="chat-messages" id="chat-messages">
                            <!-- Existing messages will be loaded here -->
                        </div>
                    </div>
                    <div class="card-footer p-0 bg-dark">
                        <div class="input-group">
                            <input type="text" class="form-control" id="message-input"
                                placeholder="Type your message...">
                            <button class="btn btn-primary" id="send-message">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <footer class="footer mt-auto py-3 bg-dark">
        <div class="container text-center">
            <span class="text-white mb-0">Brainstorm Game &copy; 2023</span>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const currentUser = {
            id: '<%= user._id %>',
            username: '<%= user.username %>',
            profilePicture: '<%= user.profilePicture || "/images/default-avatar.png" %>'
        };
        const roomCode = new URLSearchParams(window.location.search).get('room');

        // When page loads, join the game room
        document.addEventListener('DOMContentLoaded', () => {
            socket.emit('joinGameRoom', {
                roomCode: roomCode,
                user: currentUser
            });
        });

        // Handle player list updates
        socket.on('updatePlayers', (players) => {
            const playersList = document.getElementById('players-list');
            const playerCount = document.getElementById('player-count');

            playersList.innerHTML = '';
            playerCount.textContent = players.length;

            // Limitar a exibição se quiser (opcional)
            const displayPlayers = players; // ou players.slice(0, 10) para limitar

            displayPlayers.forEach(player => {
                const isCurrentUser = player.id === currentUser.id;
                const playerElement = document.createElement('div');
                playerElement.className = `player-item ${isCurrentUser ? 'current-user' : ''}`;
                playerElement.innerHTML = `
            <div class="player-avatar">
                <img src="${player.profilePicture}" alt="${player.username}">
            </div>
            <div class="player-info">
                <div class="player-name">${isCurrentUser ? 'You' : player.username}</div>
                <div class="player-status small">${player.status || 'Playing'}</div>
            </div>
        `;
                playersList.appendChild(playerElement);
            });
        });

        // Handle chat messages
        socket.on('updateChat', (messages) => {
            const chatMessages = document.getElementById('chat-messages');
            chatMessages.innerHTML = '';

            messages.forEach(msg => {
                addMessage(msg.sender, msg.content, msg.type);
            });
        });

        socket.on('newMessage', (message) => {
            addMessage(message.sender, message.content, message.type);
        });

        function addMessage(sender, content, type = 'other') {
            const messagesContainer = document.getElementById('chat-messages');
            const messageElement = document.createElement('div');

            messageElement.className = `message ${type}`;
            messageElement.innerHTML = `
                <div class="message-sender">${sender}:</div>
                <div class="message-content">${content}</div>
            `;

            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Chat functionality
        document.getElementById('send-message').addEventListener('click', sendMessage);
        document.getElementById('message-input').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') sendMessage();
        });

        function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();

            if (message) {
                socket.emit('sendGameMessage', {
                    roomCode: roomCode,
                    message: message,
                    user: currentUser
                });
                input.value = '';
            }
        }

        // Game submission
        document.getElementById('submit-response').addEventListener('click', async () => {
            const responseInput = document.getElementById('response-input');
            const generatedResponseContainer = document.getElementById('generated-response');
            const prompt = responseInput.value.trim(); // Get the user's input

            if (!prompt) {
                alert('Please type a response before submitting.');
                return;
            }

            console.log("Prompt being sent:", prompt); // Debugging: Log the prompt

            try {
                // Send the prompt to the API
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ prompt }), // Pass the prompt correctly
                });

                const result = await response.json();

                if (result.success) {
                    // Display the generated response
                    generatedResponseContainer.textContent = result.response.choices[0].message.content;
                    generatedResponseContainer.classList.remove('d-none');
                } else {
                    alert('Failed to generate response: ' + result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while generating the response.');
            }
        });
    </script>
</body>

</html>