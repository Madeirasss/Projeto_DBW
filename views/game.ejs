<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Creative Chain | Brainstorm</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/game.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>

<body>
    <nav class="navbar navbar-expand-lg fixed-top">
        <div class="container-fluid">
            <a class="navbar-brand logo" href="/">Brainstorm</a>
            <div class="d-flex align-items-center">
                <div class="user-avatar me-2">
                    <img src="<%= user.profilePicture || '/images/default-avatar.png' %>" alt="<%= user.username %>">
                </div>
                <span class="text-white me-3">
                    <%= user.username %>
                </span>
                <a href="/logout" class="btn btn-sm btn-outline-light">Logout</a>
            </div>
        </div>
    </nav>

    <main class="container-fluid game-container">
        <div class="row h-100 gx-2">
            <!-- Players Column -->
            <div class="col-md-2">
                <div class="card players-card h-100">
                    <div class="card-header bg-dark d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 text-white">Players</h5>
                        <span class="badge bg-gold" id="player-count">0</span>
                    </div>
                    <div class="card-body p-0 d-flex flex-column">
                        <div class="players-list" id="players-list">
                            <!-- Players added dynamically -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Game Column -->
            <div class="col-md-7">
                <div class="card game-card h-100 position-relative">
                    <!-- Round and Timer Info -->
                    <div class="round-info" id="round-info">
                        Round: <span id="current-round">0</span>/<span id="total-rounds">5</span>
                    </div>
                    <div class="timer-container" id="timer-container">
                        Time: <span id="timer-display">0</span>s
                    </div>

                    <div class="card-header text-center bg-dark text-white">
                        <h2 id="prompt-title">Creative Chain</h2>
                    </div>
                    <div class="card-body" id="game-content">
                        <!-- Waiting Screen -->
                        <div id="waiting-screen" class="text-center py-5">
                            <div class="spinner-border text-primary mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <h3>Waiting for players...</h3>
                            <p id="waiting-message">Need 1 more player to start</p>
                        </div>

                        <!-- Prompt Screen -->
                        <div id="prompt-screen" class="d-none h-100 d-flex flex-column">
                            <p id="prompt-text" class="text-center mb-4 fs-5"></p>
                            <textarea id="response-input" class="form-control flex-grow-1"
                                placeholder="Type your creative response here..."></textarea>
                            <div class="d-flex justify-content-between mt-3">
                                <button id="skip-round" class="btn btn-outline-warning">Skip</button>
                                <button id="submit-response" class="btn btn-gold">Submit</button>
                            </div>
                        </div>

                        <!-- Results Screen -->
                        <div id="results-screen" class="d-none h-100 d-flex flex-column">
                            <h3 class="text-center mb-4">Game Results</h3>
                            <div id="rounds-results" class="flex-grow-1 overflow-auto mb-3"></div>
                            <div class="text-center mt-3">
                                <button id="return-to-lobby" class="btn btn-gold btn-lg">
                                    <i class="fas fa-arrow-left me-2"></i>Return to Lobby
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chat Column -->
            <div class="col-md-3">
                <div class="card chat-card h-100">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0">Chat</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="chat-messages" id="chat-messages"></div>
                    </div>
                    <div class="card-footer p-0 bg-dark">
                        <div class="input-group">
                            <input type="text" class="form-control" id="message-input"
                                placeholder="Type your message...">
                            <button class="btn btn-primary" id="send-message">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Story Modal -->
    <div class="modal fade" id="storyModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header">
                    <h5 class="modal-title">Generated Text</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="generated-story" class="story-content"></div>
                    <div id="story-error" class="text-danger mt-3 d-none"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button id="retry-story" type="button" class="btn btn-primary d-none">Try Again</button>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer mt-auto py-3 bg-dark">
        <div class="container text-center">
            <span class="text-white mb-0">Creative Chain Game &copy; 2023</span>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Initialize socket.io connection and user/room info
        const socket = io();
        const currentUser = {
            id: '<%= user._id %>',
            username: '<%= user.username %>',
            profilePicture: '<%= user.profilePicture || "/images/default-avatar.png" %>'
        };
        const roomCode = new URLSearchParams(window.location.search).get('room');

        // Game state object to track rounds, timer, and other info
        const gameState = {
            currentRound: 0,
            totalRounds: 5,
            timer: null,
            timeRemaining: 0,
            isGameActive: false,
            currentPrompt: ""
        };

        // Get references to UI elements
        const waitingScreen = document.getElementById('waiting-screen');
        const promptScreen = document.getElementById('prompt-screen');
        const resultsScreen = document.getElementById('results-screen');
        const roundResults = document.getElementById('rounds-results');
        const timerDisplay = document.getElementById('timer-display');
        const timerContainer = document.getElementById('timer-container');
        const currentRoundDisplay = document.getElementById('current-round');
        const totalRoundsDisplay = document.getElementById('total-rounds');
        const responseInput = document.getElementById('response-input');
        const submitButton = document.getElementById('submit-response');
        const skipButton = document.getElementById('skip-round');
        const generateStoryBtn = document.getElementById('generate-story');

        // When the page loads, join the game room
        document.addEventListener('DOMContentLoaded', () => {
            socket.emit('joinGameRoom', {
                roomCode: roomCode,
                user: currentUser
            });
        });

        // Update the players list when receiving new player data
        socket.on('updatePlayers', (players) => {
            gameState.players = players;
            const playersList = document.getElementById('players-list');
            const playerCount = document.getElementById('player-count');

            playersList.innerHTML = '';
            playerCount.textContent = players.length;

            players.forEach(player => {
                const isCurrent = player.userId === currentUser.id;
                const playerEl = document.createElement('div');
                playerEl.className = `player-item ${isCurrent ? 'current-user' : ''}`;
                playerEl.innerHTML = `
                    <div class="player-avatar">
                        <img src="${player.profilePicture}" alt="${player.username}">
                    </div>
                    <div class="player-info">
                        <div class="player-name">${isCurrent ? 'You' : player.username}</div>
                        <div class="player-status small">${player.status || 'Playing'}</div>
                    </div>
                `;
                playersList.appendChild(playerEl);
            });
        });

        // Show waiting message with number of players needed
        socket.on('gameWaiting', (needed) => {
            document.getElementById('waiting-message').textContent =
                `Waiting for ${needed} more player${needed > 1 ? 's' : ''} to start...`;
        });

        // Show "game starting soon" message
        socket.on('gameStarting', () => {
            document.getElementById('waiting-message').textContent = "Game starting soon...";
        });

        // When the game starts, update round and timer settings and show the prompt screen
        socket.on('gameStarted', (settings) => {
            gameState.totalRounds = settings.rounds;
            gameState.timePerRound = settings.ideaTime;
            totalRoundsDisplay.textContent = settings.rounds;

            // Show the problem as the title if provided
            const promptTitle = document.getElementById('prompt-title');
            console.log("Problem received:", settings.problem); // Debugging log
            if (settings.problem && settings.problem.trim() !== "") {
                promptTitle.textContent = settings.problem;
            } else {
                promptTitle.textContent = "Creative Chain";
            }

            waitingScreen.classList.add('d-none');
            promptScreen.classList.remove('d-none');
            gameState.isGameActive = true;
        });

        // When a new round starts, update the prompt and reset input fields
        socket.on('newRound', (data) => {
            // Clear any existing timer
            if (gameState.timer) {
                clearInterval(gameState.timer);
                gameState.timer = null;
            }

            gameState.currentRound = data.round;
            gameState.currentPrompt = data.prompt;
            currentRoundDisplay.textContent = data.round;

            document.getElementById('prompt-text').textContent = data.prompt;
            responseInput.value = '';
            responseInput.disabled = false;
            submitButton.disabled = false;

            // Show the problem if provided
            if (data.problem) {
                const problemBox = document.getElementById('problem-box');
                problemBox.textContent = "Problem: " + data.problem;
                problemBox.classList.remove('d-none');
            }

            // Also update the title in case the problem changes
            const promptTitle = document.getElementById('prompt-title');
            if (data.problem && data.problem.trim() !== "") {
                promptTitle.textContent = data.problem;
            } else {
                promptTitle.textContent = "Creative Chain";
            }

            // Show timer
            timerContainer.style.display = 'block';
        });

        // Update the timer display and add warning/danger classes as time runs out
        socket.on('updateTimer', (time) => {
            gameState.timeRemaining = time;
            timerDisplay.textContent = time;

            if (time <= 10) {
                timerContainer.classList.add('timer-danger');
                timerContainer.classList.remove('timer-warning');
            } else if (time <= 30) {
                timerContainer.classList.add('timer-warning');
                timerContainer.classList.remove('timer-danger');
            } else {
                timerContainer.classList.remove('timer-warning', 'timer-danger');
            }
        });

        // Disable input for the player who has already responded
        socket.on('playerResponded', ({ userId }) => {
            if (userId === currentUser.id) {
                responseInput.disabled = true;
                submitButton.disabled = true;
            }
        });

        // When the game finishes, show the results screen and render stories and votes
        socket.on('gameFinished', ({ playerStories, leaderboard, votes }) => {
            console.log('Game finished data:', { playerStories, leaderboard, votes });
            timerContainer.style.display = 'none';
            promptScreen.classList.add('d-none');
            resultsScreen.classList.remove('d-none');

            // Store data in gameState
            gameState.playerStories = playerStories;
            gameState.leaderboard = leaderboard;
            gameState.votes = votes || {};

            // Render stories with current vote counts
            roundResults.innerHTML = `
        <div class="stories-container">
            ${Object.entries(playerStories).map(([userId, story]) => {
                const player = (gameState.players || []).find(p => p.userId === userId);
                const votes = gameState.votes[userId] || { up: 0, down: 0 };
                return `
                    <div class="player-story mb-4 p-3 bg-dark rounded" data-user-id="${userId}">
                        <h4 class="text-gold">${player ? player.username : userId}</h4>
                        <p>${story}</p>
                        <div class="vote-buttons mt-3">
                            <button class="btn btn-gold btn-vote btn-upvote me-2" data-vote="up" title="Upvote">
                                <i class="fas fa-thumbs-up"></i>
                                <span class="vote-count" data-type="up">${votes.up || 0}</span>
                            </button>
                            <button class="btn btn-outline-warning btn-vote btn-downvote" data-vote="down" title="Downvote">
                                <i class="fas fa-thumbs-down"></i>
                                <span class="vote-count" data-type="down">${votes.down || 0}</span>
                            </button>
                        </div>
                        <div class="score-display mt-2">
                            <small>Score: <span class="text-gold">${(votes.up || 0) - (votes.down || 0)}</span></small>
                        </div>
                    </div>
                `;
            }).join('')}
        </div>
        <div class="text-center mt-4">
            <button id="show-leaderboard" class="btn btn-gold btn-lg">
                <i class="fas fa-trophy me-2"></i>Show Final Results
            </button>
        </div>
        <div id="leaderboard-container" class="d-none"></div>
    `;
        });

        // Show the leaderboard with final rankings
        function showLeaderboard() {
            if (!gameState.leaderboard) return;

            const leaderboardContainer = document.getElementById('leaderboard-container');
            leaderboardContainer.classList.remove('d-none');

            // Sort leaderboard by score
            const updatedLeaderboard = [...gameState.leaderboard].sort((a, b) => b.score - a.score);

            leaderboardContainer.innerHTML = `
        <div class="leaderboard mt-4 p-3 bg-dark rounded">
            <h3 class="text-center text-gold mb-3">Final Ranking</h3>
            <div class="table-responsive">
                <table class="table table-dark table-hover">
                    <thead>
                        <tr>
                            <th>Position</th>
                            <th>Player</th>
                            <th>Score</th>
                            <th>Upvotes</th>
                            <th>Downvotes</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${updatedLeaderboard.map((player, index) => {
            const playerData = gameState.leaderboard.find(p => p.userId === player.userId) || player;
            return `
                                <tr class="${getRankingClass(index)}">
                                    <td>${getPositionIcon(index + 1)} ${index + 1}</td>
                                    <td>${playerData.username}</td>
                                    <td>${playerData.upvotes - playerData.downvotes}</td>
                                    <td>${playerData.upvotes}</td>
                                    <td>${playerData.downvotes}</td>
                                </tr>
                            `;
        }).join('')}
                    </tbody>
                </table>
            </div>
        </div>
    `;

            leaderboardContainer.scrollIntoView({ behavior: 'smooth' });
        }

        // Return a trophy/medal icon for the top 3 positions
        function getPositionIcon(position) {
            if (position === 1) return '<i class="fas fa-crown text-warning"></i>';
            if (position === 2) return '<i class="fas fa-medal text-secondary"></i>';
            if (position === 3) return '<i class="fas fa-medal text-danger"></i>';
            return '';
        }

        // Return a class for styling the top 3 positions
        function getRankingClass(index) {
            if (index === 0) return 'first-place';
            if (index === 1) return 'second-place';
            if (index === 2) return 'third-place';
            return '';
        }

        // Show leaderboard when the button is clicked
        document.addEventListener('click', function (e) {
            if (e.target && e.target.id === 'show-leaderboard') {
                showLeaderboard();
            }
        });

        // Voting logic for upvotes and downvotes
        document.addEventListener('click', function (e) {
            if (e.target.closest('.btn-vote')) {
                const btn = e.target.closest('.btn-vote');
                const playerStory = btn.closest('.player-story');
                const userId = playerStory.getAttribute('data-user-id');
                const voteType = btn.getAttribute('data-vote');

                // Prevent double click on client (visual only, server is authoritative)
                btn.disabled = true;

                socket.emit('voteStory', {
                    roomCode,
                    userId,
                    vote: voteType
                });
            }
        });

        // Update votes in the UI when receiving new vote data from the server
        socket.on('updateVotes', ({ userId, upvotes, downvotes }) => {
            // Update vote counts in UI
            const playerStory = document.querySelector(`.player-story[data-user-id="${userId}"]`);
            if (playerStory) {
                playerStory.querySelector('.vote-count[data-type="up"]').textContent = upvotes;
                playerStory.querySelector('.vote-count[data-type="down"]').textContent = downvotes;

                // Update score display
                const scoreDisplay = playerStory.querySelector('.score-display span');
                if (scoreDisplay) {
                    scoreDisplay.textContent = upvotes - downvotes;
                }
            }

            // Update leaderboard in gameState if it exists
            if (gameState.leaderboard) {
                const playerIndex = gameState.leaderboard.findIndex(p => p.userId === userId);
                if (playerIndex !== -1) {
                    gameState.leaderboard[playerIndex].upvotes = upvotes;
                    gameState.leaderboard[playerIndex].downvotes = downvotes;
                    gameState.leaderboard[playerIndex].score = upvotes - downvotes;

                    // Re-sort leaderboard
                    gameState.leaderboard.sort((a, b) => b.score - a.score);
                }
            }
        });

        // Handle submit button click for sending a response
        submitButton.addEventListener('click', () => {
            const response = responseInput.value.trim();
            if (response) {
                socket.emit('submitResponse', {
                    roomCode: roomCode,
                    userId: currentUser.id,
                    response: response
                });
            }
        });

        // Handle skip button click to skip the round
        skipButton.addEventListener('click', () => {
            socket.emit('submitResponse', {
                roomCode: roomCode,
                userId: currentUser.id,
                response: "[SKIPPED]"
            });
        });

        // Handle "Create Story" button click to generate a story using the server
        generateStoryBtn.addEventListener('click', async () => {
            generateStoryBtn.innerHTML = `
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Creating Story...
    `;
            generateStoryBtn.disabled = true;

            try {
                const response = await fetch('/generate-story', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ roomCode })
                });

                const result = await response.json();
                const storyModal = new bootstrap.Modal('#storyModal');

                if (result.success) {
                    // Show the generated story in the modal
                    const storyContent = result.response.choices[0].message.content;
                    document.getElementById('generated-story').innerHTML =
                        storyContent.split('\n').map(para => `<p>${para}</p>`).join('');
                } else {
                    document.getElementById('generated-story').innerHTML =
                        `<p class="text-danger">${result.message || 'Error generating story'}</p>`;
                }

                storyModal.show();
            } catch (error) {
                console.error('Error:', error);
                document.getElementById('generated-story').innerHTML =
                    `<p class="text-danger">Network error. Please try again.</p>`;
                const storyModal = new bootstrap.Modal('#storyModal');
                storyModal.show();
            } finally {
                generateStoryBtn.innerHTML = 'Create Story';
                generateStoryBtn.disabled = false;
            }
        });

        // Chat functionality: send message on button click or Enter key
        document.getElementById('send-message').addEventListener('click', sendMessage);
        document.getElementById('message-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        // Function to send a chat message to the server
        function sendMessage() {
            const input = document.getElementById('message-input');
            const message = input.value.trim();

            if (message) {
                socket.emit('sendGameMessage', {
                    roomCode: roomCode,
                    message: message,
                    user: currentUser
                });
                input.value = '';
            }
        }

        // Listen for new chat messages from the server and display them in the chat area
        socket.on('newMessage', (message) => {
            const messagesContainer = document.getElementById('chat-messages');
            const messageElement = document.createElement('div');

            // Set the class for styling based on message type (user, system, etc.)
            messageElement.className = `message ${message.type}`;
            // Add sender and message content to the chat message element
            messageElement.innerHTML = `
                <div class="message-sender">${message.sender}:</div>
                <div class="message-content">${message.content}</div>
            `;

            // Add the new message to the chat container and scroll to the bottom
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        });

        // Clean up any running timers when the user leaves the page
        window.addEventListener('beforeunload', () => {
            if (gameState.timer) {
                clearInterval(gameState.timer);
            }
        });

        // When the "Return to Lobby" button is clicked, save the game history and redirect
        document.getElementById('return-to-lobby').addEventListener('click', async () => {
            try {
                // Send a POST request to save the game history for this room
                const response = await fetch('/save-history', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ roomCode })
                });

                // Log an error if saving history fails
                if (!response.ok) {
                    console.error('Failed to save game history');
                }
            } catch (err) {
                // Log any network or server errors
                console.error('Error saving history:', err);
            }

            // Redirect the user back to the lobby page
            window.location.href = '/lobby';
        });
    </script>
</body>

</html>